{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hatef\\\\Desktop\\\\Coding\\\\public-directory\\\\country-data\\\\src\\\\components\\\\CountryVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport { Box, Typography } from '@mui/material';\nimport FilterPanel from './FilterPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountryVisualization = ({\n  data\n}) => {\n  _s();\n  const svgRef = useRef();\n  const tooltipRef = useRef();\n  const [width, setWidth] = useState(800);\n  const [height, setHeight] = useState(500);\n  const [isMobile, setIsMobile] = useState(false);\n  const [selectedSystem, setSelectedSystem] = useState('All');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [opacityValue, setOpacityValue] = useState(0.7);\n  const [minGdpFilter, setMinGdpFilter] = useState(0);\n  const [maxGdpFilter, setMaxGdpFilter] = useState(Infinity);\n\n  // Extract unique political systems for filtering\n  const politicalSystems = ['All', ...new Set(data.map(d => d.political_system))];\n\n  // Colorblind-friendly color palette\n  const accessibleColors = ['#1f77b4',\n  // blue\n  '#ff7f0e',\n  // orange\n  '#2ca02c',\n  // green\n  '#d62728',\n  // red\n  '#9467bd',\n  // purple\n  '#8c564b',\n  // brown\n  '#e377c2',\n  // pink\n  '#7f7f7f',\n  // gray\n  '#bcbd22',\n  // olive\n  '#17becf',\n  // cyan\n  '#393b79',\n  // dark blue\n  '#637939',\n  // olive green\n  '#8c6d31',\n  // brown-orange\n  '#843c39',\n  // dark red\n  '#7b4173' // dark purple\n  ];\n\n  // Color scale for political systems\n  const colorScale = d3.scaleOrdinal().domain(politicalSystems.filter(d => d !== 'All')).range(accessibleColors);\n  useEffect(() => {\n    // Filter data based on selected political system and search term\n    let filteredData = data;\n\n    // Filter by political system\n    if (selectedSystem !== 'All') {\n      filteredData = filteredData.filter(d => d.political_system === selectedSystem);\n    }\n\n    // Filter by search term\n    if (searchTerm) {\n      const term = searchTerm.toLowerCase();\n      filteredData = filteredData.filter(d => d.country.toLowerCase().includes(term));\n    }\n\n    // Filter by GDP range\n    filteredData = filteredData.filter(d => d.gdp_per_capita >= minGdpFilter && d.gdp_per_capita <= (maxGdpFilter === Infinity ? d3.max(data, d => d.gdp_per_capita) : maxGdpFilter));\n\n    // Clear previous visualization\n    d3.select(svgRef.current).selectAll('*').remove();\n\n    // Create SVG\n    const svg = d3.select(svgRef.current).attr('width', width).attr('height', height);\n\n    // Create scales\n    const xScale = d3.scaleLinear().domain([0, d3.max(data, d => d.economic_freedom) * 1.1]).range([50, width - 50]);\n    const yScale = d3.scaleLinear().domain([0, d3.max(data, d => d.gdp_per_capita) * 1.1]).range([height - 50, 50]);\n    const radiusScale = d3.scaleSqrt().domain([0, d3.max(data, d => d.population)]).range([3, 25]);\n\n    // Create axes\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale);\n    svg.append('g').attr('transform', `translate(0, ${height - 50})`).call(xAxis);\n    svg.append('g').attr('transform', 'translate(50, 0)').call(yAxis);\n\n    // Add axis labels\n    svg.append('text').attr('x', width / 2).attr('y', height - 10).attr('text-anchor', 'middle').text('Economic Freedom Index');\n    svg.append('text').attr('transform', 'rotate(-90)').attr('x', -height / 2).attr('y', 15).attr('text-anchor', 'middle').text('GDP Per Capita (USD)');\n\n    // Create tooltip\n    const tooltip = d3.select(tooltipRef.current).style('position', 'absolute').style('visibility', 'hidden').style('background-color', 'white').style('border', '1px solid #ddd').style('padding', '10px').style('border-radius', '5px').style('pointer-events', 'none').style('z-index', '1000');\n\n    // Add circles for each country\n    svg.selectAll('circle').data(filteredData).enter().append('circle').attr('cx', d => xScale(d.economic_freedom)).attr('cy', d => yScale(d.gdp_per_capita)).attr('r', d => radiusScale(d.population)).attr('fill', d => colorScale(d.political_system)).attr('opacity', opacityValue).attr('stroke', '#333').attr('stroke-width', 1).on('mouseover', (event, d) => {\n      tooltip.style('visibility', 'visible').html(`\n            <strong>${d.country}</strong><br/>\n            GDP per capita: $${d.gdp_per_capita.toLocaleString()}<br/>\n            Population: ${d.population.toLocaleString()}<br/>\n            Economic Freedom: ${d.economic_freedom.toFixed(1)}<br/>\n            Political System: ${d.political_system}\n          `);\n    }).on('mousemove', event => {\n      tooltip.style('top', event.pageY - 10 + 'px').style('left', event.pageX + 10 + 'px');\n    }).on('mouseout', () => {\n      tooltip.style('visibility', 'hidden');\n    });\n\n    // Add country labels for highlighted countries or search results\n    if (searchTerm || filteredData.length < 20) {\n      svg.selectAll('text.country-label').data(filteredData).enter().append('text').attr('class', 'country-label').attr('x', d => xScale(d.economic_freedom)).attr('y', d => yScale(d.gdp_per_capita) - radiusScale(d.population) - 5).attr('text-anchor', 'middle').attr('font-size', '10px').text(d => d.country);\n    }\n\n    // Add legend with responsive positioning\n    const legendGroup = svg.append('g').attr('transform', `translate(${isMobile ? 10 : width - 150}, ${isMobile ? height - 200 : 50})`);\n\n    // Add title to legend\n    legendGroup.append('text').attr('x', 0).attr('y', -10).attr('font-weight', 'bold').text('Political Systems');\n    const uniqueSystems = [...new Set(data.map(d => d.political_system))];\n\n    // Limit legend items if there are too many\n    const displaySystems = uniqueSystems.length > 10 ? [...uniqueSystems.slice(0, 9), 'Other Systems'] : uniqueSystems;\n    displaySystems.forEach((system, i) => {\n      const legendRow = legendGroup.append('g').attr('transform', `translate(0, ${i * 20 + 10})`);\n      legendRow.append('rect').attr('width', 10).attr('height', 10).attr('fill', colorScale(system));\n      legendRow.append('text').attr('x', 20).attr('y', 10).attr('text-anchor', 'start').style('font-size', '12px').text(system);\n    });\n\n    // Add population scale reference with responsive positioning\n    const populationLegend = svg.append('g').attr('transform', `translate(${isMobile ? width - 100 : 70}, ${isMobile ? height - 200 : 70})`);\n    populationLegend.append('text').attr('x', 0).attr('y', -10).attr('font-weight', 'bold').text('Population Scale');\n    const populationSizes = [10000000, 100000000, 1000000000];\n    const populationLabels = ['10M', '100M', '1B'];\n    populationSizes.forEach((size, i) => {\n      const cy = i * 30 + 20;\n      populationLegend.append('circle').attr('cx', 10).attr('cy', cy).attr('r', radiusScale(size)).attr('fill', 'none').attr('stroke', '#333').attr('stroke-width', 1);\n      populationLegend.append('text').attr('x', 30).attr('y', cy + 5).attr('text-anchor', 'start').style('font-size', '12px').text(populationLabels[i]);\n    });\n\n    // Add count of displayed countries\n    svg.append('text').attr('x', width - 150).attr('y', height - 60).attr('text-anchor', 'start').style('font-size', '12px').text(`Showing ${filteredData.length} of ${data.length} countries`);\n  }, [data, width, height, selectedSystem, searchTerm, opacityValue, minGdpFilter, maxGdpFilter, colorScale]);\n\n  // Handle window resize and mobile detection\n  useEffect(() => {\n    const handleResize = () => {\n      const container = svgRef.current.parentElement;\n      if (container) {\n        const containerWidth = container.clientWidth;\n        const mobile = containerWidth < 768;\n        setIsMobile(mobile);\n\n        // Responsive dimensions\n        setWidth(containerWidth);\n        setHeight(mobile ? containerWidth * 0.8 : Math.min(containerWidth * 0.6, 500));\n      }\n    };\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Calculate max GDP for slider\n  const maxGdp = Math.ceil(d3.max(data, d => d.gdp_per_capita) / 10000) * 10000;\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(FilterPanel, {\n      searchTerm: searchTerm,\n      setSearchTerm: setSearchTerm,\n      selectedSystem: selectedSystem,\n      setSelectedSystem: setSelectedSystem,\n      politicalSystems: politicalSystems,\n      opacityValue: opacityValue,\n      setOpacityValue: setOpacityValue,\n      minGdpFilter: minGdpFilter,\n      maxGdpFilter: maxGdpFilter,\n      setMinGdpFilter: setMinGdpFilter,\n      setMaxGdpFilter: setMaxGdpFilter,\n      maxGdp: maxGdp,\n      isMobile: isMobile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: 'relative',\n        width: '100%',\n        height: 'auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        style: {\n          maxWidth: '100%',\n          height: 'auto'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: tooltipRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        children: \"\\u2022 Circle size represents population \\u2022 X-axis shows Economic Freedom Index \\u2022 Y-axis shows GDP Per Capita \\u2022 Colors represent different political systems \\u2022 Use the filters above to explore specific countries or political systems\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 5\n  }, this);\n};\n_s(CountryVisualization, \"j7g0zeiLy7+AzQKKDKTYyGwM4tA=\");\n_c = CountryVisualization;\nexport default CountryVisualization;\nvar _c;\n$RefreshReg$(_c, \"CountryVisualization\");","map":{"version":3,"names":["React","useRef","useEffect","useState","d3","Box","Typography","FilterPanel","jsxDEV","_jsxDEV","CountryVisualization","data","_s","svgRef","tooltipRef","width","setWidth","height","setHeight","isMobile","setIsMobile","selectedSystem","setSelectedSystem","searchTerm","setSearchTerm","opacityValue","setOpacityValue","minGdpFilter","setMinGdpFilter","maxGdpFilter","setMaxGdpFilter","Infinity","politicalSystems","Set","map","d","political_system","accessibleColors","colorScale","scaleOrdinal","domain","filter","range","filteredData","term","toLowerCase","country","includes","gdp_per_capita","max","select","current","selectAll","remove","svg","attr","xScale","scaleLinear","economic_freedom","yScale","radiusScale","scaleSqrt","population","xAxis","axisBottom","yAxis","axisLeft","append","call","text","tooltip","style","enter","on","event","html","toLocaleString","toFixed","pageY","pageX","length","legendGroup","uniqueSystems","displaySystems","slice","forEach","system","i","legendRow","populationLegend","populationSizes","populationLabels","size","cy","handleResize","container","parentElement","containerWidth","clientWidth","mobile","Math","min","window","addEventListener","removeEventListener","maxGdp","ceil","children","fileName","_jsxFileName","lineNumber","columnNumber","sx","position","ref","maxWidth","mt","variant","color","_c","$RefreshReg$"],"sources":["C:/Users/Hatef/Desktop/Coding/public-directory/country-data/src/components/CountryVisualization.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport { Box, Typography } from '@mui/material';\nimport FilterPanel from './FilterPanel';\n\nconst CountryVisualization = ({ data }) => {\n  const svgRef = useRef();\n  const tooltipRef = useRef();\n  const [width, setWidth] = useState(800);\n  const [height, setHeight] = useState(500);\n  const [isMobile, setIsMobile] = useState(false);\n  const [selectedSystem, setSelectedSystem] = useState('All');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [opacityValue, setOpacityValue] = useState(0.7);\n  const [minGdpFilter, setMinGdpFilter] = useState(0);\n  const [maxGdpFilter, setMaxGdpFilter] = useState(Infinity);\n  \n  // Extract unique political systems for filtering\n  const politicalSystems = ['All', ...new Set(data.map(d => d.political_system))];\n  \n  // Colorblind-friendly color palette\n  const accessibleColors = [\n    '#1f77b4', // blue\n    '#ff7f0e', // orange\n    '#2ca02c', // green\n    '#d62728', // red\n    '#9467bd', // purple\n    '#8c564b', // brown\n    '#e377c2', // pink\n    '#7f7f7f', // gray\n    '#bcbd22', // olive\n    '#17becf', // cyan\n    '#393b79', // dark blue\n    '#637939', // olive green\n    '#8c6d31', // brown-orange\n    '#843c39', // dark red\n    '#7b4173'  // dark purple\n  ];\n\n  // Color scale for political systems\n  const colorScale = d3.scaleOrdinal()\n    .domain(politicalSystems.filter(d => d !== 'All'))\n    .range(accessibleColors);\n  \n  useEffect(() => {\n    // Filter data based on selected political system and search term\n    let filteredData = data;\n    \n    // Filter by political system\n    if (selectedSystem !== 'All') {\n      filteredData = filteredData.filter(d => d.political_system === selectedSystem);\n    }\n    \n    // Filter by search term\n    if (searchTerm) {\n      const term = searchTerm.toLowerCase();\n      filteredData = filteredData.filter(d => d.country.toLowerCase().includes(term));\n    }\n    \n    // Filter by GDP range\n    filteredData = filteredData.filter(d => \n      d.gdp_per_capita >= minGdpFilter && \n      d.gdp_per_capita <= (maxGdpFilter === Infinity ? d3.max(data, d => d.gdp_per_capita) : maxGdpFilter)\n    );\n    \n    // Clear previous visualization\n    d3.select(svgRef.current).selectAll('*').remove();\n    \n    // Create SVG\n    const svg = d3.select(svgRef.current)\n      .attr('width', width)\n      .attr('height', height);\n    \n    // Create scales\n    const xScale = d3.scaleLinear()\n      .domain([0, d3.max(data, d => d.economic_freedom) * 1.1])\n      .range([50, width - 50]);\n    \n    const yScale = d3.scaleLinear()\n      .domain([0, d3.max(data, d => d.gdp_per_capita) * 1.1])\n      .range([height - 50, 50]);\n    \n    const radiusScale = d3.scaleSqrt()\n      .domain([0, d3.max(data, d => d.population)])\n      .range([3, 25]);\n    \n    // Create axes\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale);\n    \n    svg.append('g')\n      .attr('transform', `translate(0, ${height - 50})`)\n      .call(xAxis);\n    \n    svg.append('g')\n      .attr('transform', 'translate(50, 0)')\n      .call(yAxis);\n    \n    // Add axis labels\n    svg.append('text')\n      .attr('x', width / 2)\n      .attr('y', height - 10)\n      .attr('text-anchor', 'middle')\n      .text('Economic Freedom Index');\n    \n    svg.append('text')\n      .attr('transform', 'rotate(-90)')\n      .attr('x', -height / 2)\n      .attr('y', 15)\n      .attr('text-anchor', 'middle')\n      .text('GDP Per Capita (USD)');\n    \n    // Create tooltip\n    const tooltip = d3.select(tooltipRef.current)\n      .style('position', 'absolute')\n      .style('visibility', 'hidden')\n      .style('background-color', 'white')\n      .style('border', '1px solid #ddd')\n      .style('padding', '10px')\n      .style('border-radius', '5px')\n      .style('pointer-events', 'none')\n      .style('z-index', '1000');\n    \n    // Add circles for each country\n    svg.selectAll('circle')\n      .data(filteredData)\n      .enter()\n      .append('circle')\n      .attr('cx', d => xScale(d.economic_freedom))\n      .attr('cy', d => yScale(d.gdp_per_capita))\n      .attr('r', d => radiusScale(d.population))\n      .attr('fill', d => colorScale(d.political_system))\n      .attr('opacity', opacityValue)\n      .attr('stroke', '#333')\n      .attr('stroke-width', 1)\n      .on('mouseover', (event, d) => {\n        tooltip\n          .style('visibility', 'visible')\n          .html(`\n            <strong>${d.country}</strong><br/>\n            GDP per capita: $${d.gdp_per_capita.toLocaleString()}<br/>\n            Population: ${d.population.toLocaleString()}<br/>\n            Economic Freedom: ${d.economic_freedom.toFixed(1)}<br/>\n            Political System: ${d.political_system}\n          `);\n      })\n      .on('mousemove', (event) => {\n        tooltip\n          .style('top', (event.pageY - 10) + 'px')\n          .style('left', (event.pageX + 10) + 'px');\n      })\n      .on('mouseout', () => {\n        tooltip.style('visibility', 'hidden');\n      });\n    \n    // Add country labels for highlighted countries or search results\n    if (searchTerm || filteredData.length < 20) {\n      svg.selectAll('text.country-label')\n        .data(filteredData)\n        .enter()\n        .append('text')\n        .attr('class', 'country-label')\n        .attr('x', d => xScale(d.economic_freedom))\n        .attr('y', d => yScale(d.gdp_per_capita) - radiusScale(d.population) - 5)\n        .attr('text-anchor', 'middle')\n        .attr('font-size', '10px')\n        .text(d => d.country);\n    }\n    \n    // Add legend with responsive positioning\n    const legendGroup = svg.append('g')\n      .attr('transform', `translate(${isMobile ? 10 : width - 150}, ${isMobile ? height - 200 : 50})`);\n    \n    // Add title to legend\n    legendGroup.append('text')\n      .attr('x', 0)\n      .attr('y', -10)\n      .attr('font-weight', 'bold')\n      .text('Political Systems');\n    \n    const uniqueSystems = [...new Set(data.map(d => d.political_system))];\n    \n    // Limit legend items if there are too many\n    const displaySystems = uniqueSystems.length > 10 \n      ? [...uniqueSystems.slice(0, 9), 'Other Systems'] \n      : uniqueSystems;\n    \n    displaySystems.forEach((system, i) => {\n      const legendRow = legendGroup.append('g')\n        .attr('transform', `translate(0, ${i * 20 + 10})`);\n      \n      legendRow.append('rect')\n        .attr('width', 10)\n        .attr('height', 10)\n        .attr('fill', colorScale(system));\n      \n      legendRow.append('text')\n        .attr('x', 20)\n        .attr('y', 10)\n        .attr('text-anchor', 'start')\n        .style('font-size', '12px')\n        .text(system);\n    });\n    \n    // Add population scale reference with responsive positioning\n    const populationLegend = svg.append('g')\n      .attr('transform', `translate(${isMobile ? width - 100 : 70}, ${isMobile ? height - 200 : 70})`);\n    \n    populationLegend.append('text')\n      .attr('x', 0)\n      .attr('y', -10)\n      .attr('font-weight', 'bold')\n      .text('Population Scale');\n    \n    const populationSizes = [10000000, 100000000, 1000000000];\n    const populationLabels = ['10M', '100M', '1B'];\n    \n    populationSizes.forEach((size, i) => {\n      const cy = i * 30 + 20;\n      \n      populationLegend.append('circle')\n        .attr('cx', 10)\n        .attr('cy', cy)\n        .attr('r', radiusScale(size))\n        .attr('fill', 'none')\n        .attr('stroke', '#333')\n        .attr('stroke-width', 1);\n      \n      populationLegend.append('text')\n        .attr('x', 30)\n        .attr('y', cy + 5)\n        .attr('text-anchor', 'start')\n        .style('font-size', '12px')\n        .text(populationLabels[i]);\n    });\n    \n    // Add count of displayed countries\n    svg.append('text')\n      .attr('x', width - 150)\n      .attr('y', height - 60)\n      .attr('text-anchor', 'start')\n      .style('font-size', '12px')\n      .text(`Showing ${filteredData.length} of ${data.length} countries`);\n    \n  }, [data, width, height, selectedSystem, searchTerm, opacityValue, minGdpFilter, maxGdpFilter, colorScale]);\n  \n  // Handle window resize and mobile detection\n  useEffect(() => {\n    const handleResize = () => {\n      const container = svgRef.current.parentElement;\n      if (container) {\n        const containerWidth = container.clientWidth;\n        const mobile = containerWidth < 768;\n        setIsMobile(mobile);\n        \n        // Responsive dimensions\n        setWidth(containerWidth);\n        setHeight(mobile ? containerWidth * 0.8 : Math.min(containerWidth * 0.6, 500));\n      }\n    };\n    \n    handleResize();\n    window.addEventListener('resize', handleResize);\n    \n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  \n  // Calculate max GDP for slider\n  const maxGdp = Math.ceil(d3.max(data, d => d.gdp_per_capita) / 10000) * 10000;\n  \n  return (\n    <Box>\n      <FilterPanel\n        searchTerm={searchTerm}\n        setSearchTerm={setSearchTerm}\n        selectedSystem={selectedSystem}\n        setSelectedSystem={setSelectedSystem}\n        politicalSystems={politicalSystems}\n        opacityValue={opacityValue}\n        setOpacityValue={setOpacityValue}\n        minGdpFilter={minGdpFilter}\n        maxGdpFilter={maxGdpFilter}\n        setMinGdpFilter={setMinGdpFilter}\n        setMaxGdpFilter={setMaxGdpFilter}\n        maxGdp={maxGdp}\n        isMobile={isMobile}\n      />\n      \n      <Box sx={{ position: 'relative', width: '100%', height: 'auto' }}>\n        <svg ref={svgRef} style={{ maxWidth: '100%', height: 'auto' }}></svg>\n        <div ref={tooltipRef}></div>\n      </Box>\n      \n      <Box sx={{ mt: 2 }}>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          • Circle size represents population\n          • X-axis shows Economic Freedom Index\n          • Y-axis shows GDP Per Capita\n          • Colors represent different political systems\n          • Use the filters above to explore specific countries or political systems\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default CountryVisualization;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}