{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hatef\\\\Desktop\\\\Coding\\\\public-directory\\\\country-data\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CountryVisualization from './components/CountryVisualization';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport LoadingSpinner from './components/LoadingSpinner';\nimport { Box, Typography, Container, Paper } from '@mui/material';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [countryData, setCountryData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Load the CSV data using d3.csv parser instead of manual parsing\n    fetch('/data/final_country_data.csv').then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch data');\n      }\n      return response.text();\n    }).then(csvText => {\n      // Use d3.csvParse for more robust CSV parsing\n      const parsedData = d3.csvParse(csvText, d => {\n        return {\n          country: d.country,\n          gdp_per_capita: +d.gdp_per_capita,\n          // Convert to number with +\n          population: +d.population,\n          economic_freedom: +d.economic_freedom,\n          political_system: d.political_system\n        };\n      });\n      console.log(`Loaded ${parsedData.length} countries`);\n      setCountryData(parsedData);\n      setLoading(false);\n    }).catch(err => {\n      console.error('Error loading data:', err);\n      setError(err.message);\n      setLoading(false);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        my: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        component: \"h1\",\n        gutterBottom: true,\n        align: \"center\",\n        children: \"Interactive Country Data Visualization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        sx: {\n          p: 3,\n          mt: 3\n        },\n        children: loading ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n          message: \"Loading country data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this) : error ? /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            textAlign: 'center',\n            p: 4\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            color: \"error\",\n            gutterBottom: true,\n            children: \"Failed to load data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            color: \"text.secondary\",\n            children: [\"Error: \", error]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n          children: /*#__PURE__*/_jsxDEV(CountryVisualization, {\n            data: countryData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 3\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          align: \"center\",\n          children: \"Visualization of top 100 countries by GDP per capita, with population size as dot size, economic freedom on X-axis, and political system as color.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"46YibIZbd7JtTolQcTrtR1wrXaM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","CountryVisualization","ErrorBoundary","LoadingSpinner","Box","Typography","Container","Paper","d3","jsxDEV","_jsxDEV","App","_s","countryData","setCountryData","loading","setLoading","error","setError","fetch","then","response","ok","Error","text","csvText","parsedData","csvParse","d","country","gdp_per_capita","population","economic_freedom","political_system","console","log","length","catch","err","message","maxWidth","children","sx","my","variant","component","gutterBottom","align","fileName","_jsxFileName","lineNumber","columnNumber","elevation","p","mt","textAlign","color","data","_c","$RefreshReg$"],"sources":["C:/Users/Hatef/Desktop/Coding/public-directory/country-data/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CountryVisualization from './components/CountryVisualization';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport LoadingSpinner from './components/LoadingSpinner';\nimport { Box, Typography, Container, Paper } from '@mui/material';\nimport * as d3 from 'd3';\n\nfunction App() {\n  const [countryData, setCountryData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Load the CSV data using d3.csv parser instead of manual parsing\n    fetch('/data/final_country_data.csv')\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to fetch data');\n        }\n        return response.text();\n      })\n      .then(csvText => {\n        // Use d3.csvParse for more robust CSV parsing\n        const parsedData = d3.csvParse(csvText, d => {\n          return {\n            country: d.country,\n            gdp_per_capita: +d.gdp_per_capita, // Convert to number with +\n            population: +d.population,\n            economic_freedom: +d.economic_freedom,\n            political_system: d.political_system\n          };\n        });\n        \n        console.log(`Loaded ${parsedData.length} countries`);\n        setCountryData(parsedData);\n        setLoading(false);\n      })\n      .catch(err => {\n        console.error('Error loading data:', err);\n        setError(err.message);\n        setLoading(false);\n      });\n  }, []);\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ my: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom align=\"center\">\n          Interactive Country Data Visualization\n        </Typography>\n        \n        <Paper elevation={3} sx={{ p: 3, mt: 3 }}>\n          {loading ? (\n            <LoadingSpinner message=\"Loading country data...\" />\n          ) : error ? (\n            <Box sx={{ textAlign: 'center', p: 4 }}>\n              <Typography variant=\"h6\" color=\"error\" gutterBottom>\n                Failed to load data\n              </Typography>\n              <Typography color=\"text.secondary\">\n                Error: {error}\n              </Typography>\n            </Box>\n          ) : (\n            <ErrorBoundary>\n              <CountryVisualization data={countryData} />\n            </ErrorBoundary>\n          )}\n        </Paper>\n        \n        <Box sx={{ mt: 3 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n            Visualization of top 100 countries by GDP per capita, with population size as dot size,\n            economic freedom on X-axis, and political system as color.\n          </Typography>\n        </Box>\n      </Box>\n    </Container>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}